// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/domain/ports.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/scientistnik/invest-agents/internal/app/domain"
	decimal "github.com/shopspring/decimal"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// Balances mocks base method.
func (m *MockExchange) Balances(assets []string) ([]domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balances", assets)
	ret0, _ := ret[0].([]domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balances indicates an expected call of Balances.
func (mr *MockExchangeMockRecorder) Balances(assets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balances", reflect.TypeOf((*MockExchange)(nil).Balances), assets)
}

// Buy mocks base method.
func (m *MockExchange) Buy(pair domain.Pair, amount decimal.Decimal) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", pair, amount)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buy indicates an expected call of Buy.
func (mr *MockExchangeMockRecorder) Buy(pair, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockExchange)(nil).Buy), pair, amount)
}

// GetHistoryOrders mocks base method.
func (m *MockExchange) GetHistoryOrders(pairs []domain.Pair) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryOrders", pairs)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryOrders indicates an expected call of GetHistoryOrders.
func (mr *MockExchangeMockRecorder) GetHistoryOrders(pairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryOrders", reflect.TypeOf((*MockExchange)(nil).GetHistoryOrders), pairs)
}

// GetOpenOrders mocks base method.
func (m *MockExchange) GetOpenOrders() ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrders")
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrders indicates an expected call of GetOpenOrders.
func (mr *MockExchangeMockRecorder) GetOpenOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrders", reflect.TypeOf((*MockExchange)(nil).GetOpenOrders))
}

// GetOrderFee mocks base method.
func (m *MockExchange) GetOrderFee(pair domain.Pair, amount decimal.Decimal) (*decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFee", pair, amount)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderFee indicates an expected call of GetOrderFee.
func (mr *MockExchangeMockRecorder) GetOrderFee(pair, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFee", reflect.TypeOf((*MockExchange)(nil).GetOrderFee), pair, amount)
}

// LastPrice mocks base method.
func (m *MockExchange) LastPrice(pair domain.Pair) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastPrice", pair)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastPrice indicates an expected call of LastPrice.
func (mr *MockExchangeMockRecorder) LastPrice(pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastPrice", reflect.TypeOf((*MockExchange)(nil).LastPrice), pair)
}

// Sell mocks base method.
func (m *MockExchange) Sell(pair domain.Pair, amount, price decimal.Decimal) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sell", pair, amount, price)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sell indicates an expected call of Sell.
func (mr *MockExchangeMockRecorder) Sell(pair, amount, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockExchange)(nil).Sell), pair, amount, price)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), message)
}

// Error mocks base method.
func (m *MockLogger) Error(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", message)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), message)
}

// Info mocks base method.
func (m *MockLogger) Info(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", message)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), message)
}

// Warn mocks base method.
func (m *MockLogger) Warn(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", message)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), message)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepo) Create(linkName string, linkValue interface{}) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", linkName, linkValue)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(linkName, linkValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), linkName, linkValue)
}

// Find mocks base method.
func (m *MockUserRepo) Find(filter domain.UserFindFilter) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserRepoMockRecorder) Find(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepo)(nil).Find), filter)
}

// Update mocks base method.
func (m *MockUserRepo) Update(userId, newName string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, newName)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepoMockRecorder) Update(userId, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepo)(nil).Update), userId, newName)
}

// MockAgentRepo is a mock of AgentRepo interface.
type MockAgentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRepoMockRecorder
}

// MockAgentRepoMockRecorder is the mock recorder for MockAgentRepo.
type MockAgentRepoMockRecorder struct {
	mock *MockAgentRepo
}

// NewMockAgentRepo creates a new mock instance.
func NewMockAgentRepo(ctrl *gomock.Controller) *MockAgentRepo {
	mock := &MockAgentRepo{ctrl: ctrl}
	mock.recorder = &MockAgentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRepo) EXPECT() *MockAgentRepoMockRecorder {
	return m.recorder
}

// FindAgents mocks base method.
func (m *MockAgentRepo) FindAgents(active bool) ([]domain.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAgents", active)
	ret0, _ := ret[0].([]domain.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAgents indicates an expected call of FindAgents.
func (mr *MockAgentRepoMockRecorder) FindAgents(active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAgents", reflect.TypeOf((*MockAgentRepo)(nil).FindAgents), active)
}

// MockStrategyRepo is a mock of StrategyRepo interface.
type MockStrategyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyRepoMockRecorder
}

// MockStrategyRepoMockRecorder is the mock recorder for MockStrategyRepo.
type MockStrategyRepoMockRecorder struct {
	mock *MockStrategyRepo
}

// NewMockStrategyRepo creates a new mock instance.
func NewMockStrategyRepo(ctrl *gomock.Controller) *MockStrategyRepo {
	mock := &MockStrategyRepo{ctrl: ctrl}
	mock.recorder = &MockStrategyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategyRepo) EXPECT() *MockStrategyRepoMockRecorder {
	return m.recorder
}

// GetStrategyData mocks base method.
func (m *MockStrategyRepo) GetStrategyData(agentId string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyData", agentId)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetStrategyData indicates an expected call of GetStrategyData.
func (mr *MockStrategyRepoMockRecorder) GetStrategyData(agentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyData", reflect.TypeOf((*MockStrategyRepo)(nil).GetStrategyData), agentId)
}

// MockStorageRepo is a mock of StorageRepo interface.
type MockStorageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepoMockRecorder
}

// MockStorageRepoMockRecorder is the mock recorder for MockStorageRepo.
type MockStorageRepoMockRecorder struct {
	mock *MockStorageRepo
}

// NewMockStorageRepo creates a new mock instance.
func NewMockStorageRepo(ctrl *gomock.Controller) *MockStorageRepo {
	mock := &MockStorageRepo{ctrl: ctrl}
	mock.recorder = &MockStorageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepo) EXPECT() *MockStorageRepoMockRecorder {
	return m.recorder
}

// GetAgentStorage mocks base method.
func (m *MockStorageRepo) GetAgentStorage(agent domain.Agent) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentStorage", agent)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetAgentStorage indicates an expected call of GetAgentStorage.
func (mr *MockStorageRepoMockRecorder) GetAgentStorage(agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentStorage", reflect.TypeOf((*MockStorageRepo)(nil).GetAgentStorage), agent)
}

// MockExchangeRepo is a mock of ExchangeRepo interface.
type MockExchangeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRepoMockRecorder
}

// MockExchangeRepoMockRecorder is the mock recorder for MockExchangeRepo.
type MockExchangeRepoMockRecorder struct {
	mock *MockExchangeRepo
}

// NewMockExchangeRepo creates a new mock instance.
func NewMockExchangeRepo(ctrl *gomock.Controller) *MockExchangeRepo {
	mock := &MockExchangeRepo{ctrl: ctrl}
	mock.recorder = &MockExchangeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRepo) EXPECT() *MockExchangeRepoMockRecorder {
	return m.recorder
}

// GetAgentExchanges mocks base method.
func (m *MockExchangeRepo) GetAgentExchanges(agentId int64) ([]domain.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentExchanges", agentId)
	ret0, _ := ret[0].([]domain.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentExchanges indicates an expected call of GetAgentExchanges.
func (mr *MockExchangeRepoMockRecorder) GetAgentExchanges(agentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentExchanges", reflect.TypeOf((*MockExchangeRepo)(nil).GetAgentExchanges), agentId)
}

// MockLoggerRepo is a mock of LoggerRepo interface.
type MockLoggerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerRepoMockRecorder
}

// MockLoggerRepoMockRecorder is the mock recorder for MockLoggerRepo.
type MockLoggerRepoMockRecorder struct {
	mock *MockLoggerRepo
}

// NewMockLoggerRepo creates a new mock instance.
func NewMockLoggerRepo(ctrl *gomock.Controller) *MockLoggerRepo {
	mock := &MockLoggerRepo{ctrl: ctrl}
	mock.recorder = &MockLoggerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerRepo) EXPECT() *MockLoggerRepoMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockLoggerRepo) New(agentId int64) domain.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", agentId)
	ret0, _ := ret[0].(domain.Logger)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockLoggerRepoMockRecorder) New(agentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockLoggerRepo)(nil).New), agentId)
}
