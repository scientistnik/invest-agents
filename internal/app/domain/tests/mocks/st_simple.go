// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/domain/st_simple.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/scientistnik/invest-agents/internal/app/domain"
)

// MockSimpleStorage is a mock of SimpleStorage interface.
type MockSimpleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleStorageMockRecorder
}

// MockSimpleStorageMockRecorder is the mock recorder for MockSimpleStorage.
type MockSimpleStorageMockRecorder struct {
	mock *MockSimpleStorage
}

// NewMockSimpleStorage creates a new mock instance.
func NewMockSimpleStorage(ctrl *gomock.Controller) *MockSimpleStorage {
	mock := &MockSimpleStorage{ctrl: ctrl}
	mock.recorder = &MockSimpleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleStorage) EXPECT() *MockSimpleStorageMockRecorder {
	return m.recorder
}

// GetTrades mocks base method.
func (m *MockSimpleStorage) GetTrades(arg0 []domain.TradeStatus) ([]domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrades", arg0)
	ret0, _ := ret[0].([]domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrades indicates an expected call of GetTrades.
func (mr *MockSimpleStorageMockRecorder) GetTrades(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrades", reflect.TypeOf((*MockSimpleStorage)(nil).GetTrades), arg0)
}

// SaveTrades mocks base method.
func (m *MockSimpleStorage) SaveTrades(trades []domain.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTrades", trades)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTrades indicates an expected call of SaveTrades.
func (mr *MockSimpleStorageMockRecorder) SaveTrades(trades interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrades", reflect.TypeOf((*MockSimpleStorage)(nil).SaveTrades), trades)
}
